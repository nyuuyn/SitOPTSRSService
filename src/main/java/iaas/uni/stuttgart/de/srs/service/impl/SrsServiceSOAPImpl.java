/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package iaas.uni.stuttgart.de.srs.service.impl;

import iaas.uni.stuttgart.de.srs.data.rest.ThingDataSource;
import iaas.uni.stuttgart.de.srs.data.rest.SituationChangeDataSource;
import iaas.uni.stuttgart.de.srs.data.rest.SituationDataSource;
import iaas.uni.stuttgart.de.srs.data.rest.SituationTemplateDataSource;
import iaas.uni.stuttgart.de.srs.data.rest.SubscriptionDataSource;
import iaas.uni.stuttgart.de.srs.model.Thing;
import iaas.uni.stuttgart.de.srs.model.Situation;
import iaas.uni.stuttgart.de.srs.model.SituationChange;
import iaas.uni.stuttgart.de.srs.model.SituationTemplate;
import iaas.uni.stuttgart.de.srs.model.Subscription;

import java.util.List;
import java.util.logging.Logger;

import javax.annotation.Resource;
import javax.servlet.ServletRequest;
import javax.xml.bind.JAXB;
import javax.xml.bind.JAXBElement;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;

import org.apache.cxf.headers.Header;
import org.apache.cxf.helpers.CastUtils;
import org.apache.cxf.jaxws.context.WrappedMessageContext;
import org.apache.cxf.message.Message;
import org.w3c.dom.Node;

import de.uni_stuttgart.iaas.srsservice.GetRequest;
import de.uni_stuttgart.iaas.srsservice.GetResponse;
import de.uni_stuttgart.iaas.srsservice.MultiSubscribeRequestType;
import de.uni_stuttgart.iaas.srsservice.PropertyMapItemType;
import de.uni_stuttgart.iaas.srsservice.PropertyMapType;
import de.uni_stuttgart.iaas.srsservice.SituationEventStatusType;
import de.uni_stuttgart.iaas.srsservice.SituationEventType;
import de.uni_stuttgart.iaas.srsservice.SrsService;
import de.uni_stuttgart.iaas.srsservice.SubscribeRequest;
import de.uni_stuttgart.iaas.srsservice.SubscribeRequestType;
import de.uni_stuttgart.iaas.srsservice.SubscribeRequestType2;
import de.uni_stuttgart.iaas.srsservice.UnsubscribeRequest;

/**
 * This class was generated by Apache CXF 3.1.0 2015-05-21T14:07:25.800+02:00
 * Generated source version: 3.1.0
 * 
 */
@javax.jws.WebService(serviceName = "srsService", portName = "srsServiceSOAP", targetNamespace = "http://www.iaas.uni-stuttgart.de/srsService/", endpointInterface = "de.uni_stuttgart.iaas.srsservice.SrsService")
public class SrsServiceSOAPImpl implements SrsService {

	private static final Logger LOG = Logger.getLogger(SrsServiceSOAPImpl.class
			.getName());

	@Resource
	private WebServiceContext context;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * de.uni_stuttgart.iaas.srsservice.SrsService#subscribe(de.uni_stuttgart
	 * .iaas.srsservice.SubscribeRequest parameters )*
	 */
	public void subscribe(SubscribeRequest parameters) {
		
		LOG.info("Executing operation subscribe");
		System.out.println(parameters);

		System.out.println("Received MultiSubscribe");
		String msgId = null;
		for (Header header : this.getHeaders()) {
			Object o = header.getObject();
			System.out.println(header.getName().toString());

			Node headerNode = (Node) header.getObject();
			if (header.getName().toString()
					.equals("{http://www.w3.org/2005/08/addressing}MessageID")) {
				msgId = headerNode.getTextContent();
				System.out.println("Found addressing msgId: " + msgId);
			}
			
			System.out.println("Header: " + headerNode.getLocalName());
			System.out.println("Content: " + headerNode.getTextContent());
		}

		String correlation = parameters.getMultiSubscription().getCorrelation();
		String endpoint = parameters.getMultiSubscription().getEndpoint();

		for (SubscribeRequestType2 sub : parameters.getMultiSubscription()
				.getSubscriptions().getSubscription()) {

			Subscription subscription = new Subscription(sub.getSituation(),
					sub.getObject(), correlation, endpoint, msgId);

		 	System.out.println("Adding subscription: " + subscription.toString());
		 			 	
		 	SubscriptionDataSource subData = new SubscriptionDataSource();
		 	
			subData.addSubscription(subscription);
		}
		// }

	}

	private List<Header> getHeaders() {
		MessageContext messageContext = context.getMessageContext();
		if (messageContext == null
				|| !(messageContext instanceof WrappedMessageContext)) {
			return null;
		}

		Message message = ((WrappedMessageContext) messageContext)
				.getWrappedMessage();
		List<Header> headers = CastUtils.cast((List<?>) message
				.get(Header.HEADER_LIST));
		return headers;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * de.uni_stuttgart.iaas.srsservice.SrsService#get(de.uni_stuttgart.iaas
	 * .srsservice.GetRequest parameters )*
	 */
	public de.uni_stuttgart.iaas.srsservice.GetResponse get(
			GetRequest parameters) {
		LOG.info("Executing operation get");
		System.out.println(parameters);
		try {

			de.uni_stuttgart.iaas.srsservice.GetResponse _return = new GetResponse();

			for (SituationEventType situationEvent : parameters
					.getSituationEvent()) {
				String situationId = situationEvent.getSituation();
				String objId = situationEvent.getObject();

				ThingDataSource objData = new ThingDataSource();
				SituationTemplateDataSource sitTemplateData = new SituationTemplateDataSource();
				SituationDataSource sitData = new SituationDataSource();

				Thing requestedObj = null;
				SituationTemplate requestedSituation = null;
				Situation targetedSituation = null;
				
				for (Thing obsObj : objData.getThings()) {
					if (objId.equals(obsObj.getId())) {
						requestedObj = obsObj;
						break;
					}
				}

				for (SituationTemplate situation : sitTemplateData.getSituationTemplates()) {
					if (situationId.equals(situation.getId())) {
						requestedSituation = situation;
						break;
					}
				}
				
				for(Situation sit : sitData.getSituations()){
					if(sit.getSituationTemplate().equals(requestedSituation.getId()) && sit.getThing().equals(requestedObj.getId())){
						targetedSituation = sit;
						break;
					}
				}

				PropertyMapType props = new PropertyMapType();

				for (String property : requestedSituation.getObservedSituations()) {
					if (requestedObj.getProperties().containsKey(property)) {
						PropertyMapItemType propItem = new PropertyMapItemType();
						propItem.setKey(property);
						propItem.setValue(String.valueOf(requestedObj
								.getProperties().get(property)));
						props.getProperty().add(propItem);
					}
				}

				SituationEventStatusType sitStatus = new SituationEventStatusType();

				sitStatus.setSituationId(situationId);
				sitStatus.setObjectId(objId);
				sitStatus.setPropertyMap(props);
				sitStatus.setTriggered(targetedSituation.getOccured());

				_return.getSituation().add(sitStatus);
			}
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	@Override
	public void unsubscribe(UnsubscribeRequest parameters) {
		LOG.info("Excuting unsubscribe request");	
		
		SituationDataSource sitData = new SituationDataSource();
		SituationChangeDataSource sitChangeData = new SituationChangeDataSource();
		SubscriptionDataSource subData = new SubscriptionDataSource();
		
			
		// TODO change this to use mostly the SubscriptionDataSource, should be possible
		for(SubscribeRequestType2 sub : parameters.getMultiUnsubscription().getSubscriptions().getSubscription()){
			String sitTemplate = sub.getSituation();
			String thingId = sub.getObject();
			String situationId = null;
			String sitOpt2SrsCallbackEndpoint = null;
			
			for(Situation sit : sitData.getSituations()){
				if(sit.getSituationTemplate().equals(sitTemplate) && sit.getThing().equals(thingId)){
					situationId = sit.getId();
					break;
				}
			}
			
			for(SituationChange sitChange : sitChangeData.getSituationChanges()){
				if(sitChange.getId().equals(situationId)){
					// if the subscription at SitOPT contains the given Endpoint from the multiunsub, we have a hit
					if(subData.fetchEndpointFromSitOPTCallbackEndpoint(sitChange.getCallbackUrl()) != null && subData.fetchEndpointFromSitOPTCallbackEndpoint(sitChange.getCallbackUrl()).equals(parameters.getMultiUnsubscription().getEndpoint())){
						sitOpt2SrsCallbackEndpoint = sitChange.getCallbackUrl();
						break;
					}
				}
			}
			
			subData.removeSubscription(new Subscription(situationId, thingId, null, sitOpt2SrsCallbackEndpoint, null));
			
		}
	}

}
